// Create child Process using Frok

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main() {
    pid_t pid;
    pid = fork();

    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (pid == 0) {  // Child process
        printf("Child process: My PID is %d. My parent's PID is %d.\n", getpid(), getppid());
    } else {  // Parent process
        printf("Parent process: My PID is %d. My parent's PID is %d. My child's PID is %d.\n", getpid(), getppid(), pid);
    }

    return 0;
}

Aditya S Edition : 

#include <stdio.h>
#include <unistd.h>

int main() {
    pid_t child_pid;

    // Create a child process
    child_pid = fork();

    if (child_pid == -1) {
        // Error occurred
        perror("fork");
        return 1;
    } else if (child_pid == 0) {
        // Child process
        printf("Child process: My PID is %d, My parent's PID is %d\n", getpid(), getppid());
    } else {
        // Parent process
        printf("Parent process: My PID is %d, My parent's PID is %d\n", getpid(), getppid());
    }

    return 0;
}


